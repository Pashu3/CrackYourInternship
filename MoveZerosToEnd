Bruteforce: O(N), O(N)

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int n=nums.size();
        vector<int> temp;
        for(int i=0;i<n;i++)
        {
           if(nums[i] != 0)
           {
               temp.push_back(nums[i]);
           }
        }
        for(int i=0;i<temp.size();i++)
        {
            nums[i]=temp[i];
        }
        for(int i=temp.size();i<n;i++)
        {
            nums[i]=0;
        }
    }
};

Optimal -1 : O(N)

class Solution {
public:
// Optimal - 1, Two Pointers Approach 
    void moveZeroes(vector<int>& nums) {
       int n=nums.size();
       int j=-1;
       for(int i=0;i<n;i++)
       {
           if(nums[i] == 0)
           {
               j=i;
               break;
           }
       }
        if(j== -1) return;
       for(int i=j+1;i<n;i++)
       {
           if(nums[i] != 0)
           {
               swap(nums[j],nums[i]);
               j++;
           }
       }
       
    }
};


Optimal - 2: 

class Solution {
public:
// Optimal - 2,
    void moveZeroes(vector<int>& nums) {
       int n=nums.size();
       int cnt=0;
       for(int i=0;i<n;i++)
       {
           if(nums[i] !=0)
           {
               swap(nums[i],nums[cnt]);
               cnt++;
           }
       }
       
    }
};
